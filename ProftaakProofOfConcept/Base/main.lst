   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	I2C_transmissionError
  12               	I2C_transmissionError:
  13               	.LFB1:
  14               		.file 1 "main.c"
   1:main.c        **** /*****************************************************************************/
   2:main.c        **** // Includes:
   3:main.c        **** 
   4:main.c        **** #include "RP6RobotBaseLib.h" 	
   5:main.c        **** #include "RP6I2CmasterTWI.h"
   6:main.c        **** #include "Drive.h"
   7:main.c        **** #include "MPU9250.h"
   8:main.c        **** #include "Crash.h"
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** /**
  12:main.c        ****  * This function gets called automatically if there was an I2C Error like
  13:main.c        ****  * the slave sent a "not acknowledge" (NACK, error codes e.g. 0x20 or 0x30).
  14:main.c        ****  * The most common mistakes are: 
  15:main.c        ****  *   - using the wrong address for the slave
  16:main.c        ****  *   - slave not active or not connected to the I2C-Bus
  17:main.c        ****  *   - too fast requests for a slower slave
  18:main.c        ****  * Be sure to check this if you get I2C errors!
  19:main.c        ****  */
  20:main.c        **** void I2C_transmissionError(uint8_t errorState)
  21:main.c        **** {
  15               		.loc 1 21 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 1 */
  25               	.L__stack_usage = 1
  26 0002 C82F      		mov r28,r24
  22:main.c        **** 	writeString_P("\nI2C ERROR - TWI STATE: 0x");
  27               		.loc 1 22 0
  28 0004 80E0      		ldi r24,lo8(__c.2161)
  29 0006 90E0      		ldi r25,hi8(__c.2161)
  30               	.LVL1:
  31 0008 0E94 0000 		call writeNStringP
  32               	.LVL2:
  23:main.c        **** 	writeInteger(errorState, HEX);
  33               		.loc 1 23 0
  34 000c 60E1      		ldi r22,lo8(16)
  35 000e 8C2F      		mov r24,r28
  36 0010 90E0      		ldi r25,0
  37 0012 0E94 0000 		call writeInteger
  38               	.LVL3:
  24:main.c        **** 	writeChar('\n');
  39               		.loc 1 24 0
  40 0016 8AE0      		ldi r24,lo8(10)
  41               	/* epilogue start */
  25:main.c        **** }
  42               		.loc 1 25 0
  43 0018 CF91      		pop r28
  44               	.LVL4:
  24:main.c        **** 	writeChar('\n');
  45               		.loc 1 24 0
  46 001a 0C94 0000 		jmp writeChar
  47               	.LVL5:
  48               		.cfi_endproc
  49               	.LFE1:
  51               		.section	.text.startup,"ax",@progbits
  52               	.global	main
  54               	main:
  55               	.LFB2:
  26:main.c        **** 
  27:main.c        **** /************************************************************************************/
  28:main.c        **** //====================================================================================
  29:main.c        **** // Main - The program starts here:
  30:main.c        **** //====================================================================================
  31:main.c        **** /************************************************************************************/
  32:main.c        **** 
  33:main.c        **** int main(void)
  34:main.c        **** {
  56               		.loc 1 34 0
  57               		.cfi_startproc
  58 0000 CF93      		push r28
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 3
  61               		.cfi_offset 28, -2
  62 0002 DF93      		push r29
  63               	.LCFI2:
  64               		.cfi_def_cfa_offset 4
  65               		.cfi_offset 29, -3
  66 0004 00D0      		rcall .
  67 0006 00D0      		rcall .
  68 0008 00D0      		rcall .
  69               	.LCFI3:
  70               		.cfi_def_cfa_offset 10
  71 000a CDB7      		in r28,__SP_L__
  72 000c DEB7      		in r29,__SP_H__
  73               	.LCFI4:
  74               		.cfi_def_cfa_register 28
  75               	/* prologue: function */
  76               	/* frame size = 6 */
  77               	/* stack size = 8 */
  78               	.L__stack_usage = 8
  35:main.c        **** 	initRobotBase();
  79               		.loc 1 35 0
  80 000e 0E94 0000 		call initRobotBase
  81               	.LVL6:
  36:main.c        **** 	
  37:main.c        **** 
  38:main.c        **** 	I2CTWI_initMaster(100); // Initialize the TWI Module for Master operation
  82               		.loc 1 38 0
  83 0012 80E2      		ldi r24,lo8(32)
  84 0014 0E94 0000 		call __I2CTWI_initMaster
  85               	.LVL7:
  39:main.c        **** 				// with 100kHz SCL Frequency
  40:main.c        **** 				// PCF8574 and PCF8591 are only specified for
  41:main.c        **** 				// up to 100kHz SCL freq - not 400kHz HighSpeed mode!
  42:main.c        **** 	
  43:main.c        **** 	I2CTWI_setTransmissionErrorHandler(I2C_transmissionError);
  86               		.loc 1 43 0
  87 0018 80E0      		ldi r24,lo8(gs(I2C_transmissionError))
  88 001a 90E0      		ldi r25,hi8(gs(I2C_transmissionError))
  89 001c 0E94 0000 		call I2CTWI_setTransmissionErrorHandler
  90               	.LVL8:
  44:main.c        **** 	BUMPERS_setStateChangedHandler(buttenChanged);
  91               		.loc 1 44 0
  92 0020 80E0      		ldi r24,lo8(gs(buttenChanged))
  93 0022 90E0      		ldi r25,hi8(gs(buttenChanged))
  94 0024 0E94 0000 		call BUMPERS_setStateChangedHandler
  95               	.LVL9:
  45:main.c        **** 	
  46:main.c        **** 	powerON();
  96               		.loc 1 46 0
  97 0028 0E94 0000 		call powerON
  98               	.LVL10:
  47:main.c        **** 
  48:main.c        **** 	initMPU9250();
  99               		.loc 1 48 0
 100 002c 0E94 0000 		call initMPU9250
 101               	.LVL11:
  49:main.c        **** 	startStopwatch1();
 102               		.loc 1 49 0
 103 0030 8091 0000 		lds r24,stopwatches
 104 0034 8160      		ori r24,lo8(1)
 105 0036 8093 0000 		sts stopwatches,r24
 106               	.L3:
  50:main.c        **** 
  51:main.c        **** 	gyroData gData;
  52:main.c        **** 
  53:main.c        **** 	while(true)  
  54:main.c        **** 	{
  55:main.c        **** 		task_motionControl();
 107               		.loc 1 55 0
 108 003a 0E94 0000 		call task_motionControl
 109               	.LVL12:
  56:main.c        **** 		task_Bumpers();
 110               		.loc 1 56 0
 111 003e 0E94 0000 		call task_Bumpers
 112               	.LVL13:
  57:main.c        **** 		task_I2CTWI();
 113               		.loc 1 57 0
 114 0042 0E94 0000 		call task_I2CTWI
 115               	.LVL14:
  58:main.c        **** 
  59:main.c        **** 		if(!pressed)
 116               		.loc 1 59 0
 117 0046 8091 0000 		lds r24,pressed
 118 004a 8111      		cpse r24,__zero_reg__
 119 004c 00C0      		rjmp .L4
  60:main.c        **** 		{
  61:main.c        **** 			setLEDs(0b0);
 120               		.loc 1 61 0
 121 004e 0E94 0000 		call setLEDs
 122               	.LVL15:
  62:main.c        **** 
  63:main.c        **** 			setMotorDir(FWD, FWD);
 123               		.loc 1 63 0
 124 0052 60E0      		ldi r22,0
 125 0054 80E0      		ldi r24,0
 126 0056 0E94 0000 		call setMotorDir
 127               	.LVL16:
  64:main.c        **** 			moveAtSpeed(60,60);
 128               		.loc 1 64 0
 129 005a 6CE3      		ldi r22,lo8(60)
 130 005c 8CE3      		ldi r24,lo8(60)
 131 005e 0E94 0000 		call moveAtSpeed
 132               	.LVL17:
  65:main.c        **** 
  66:main.c        **** 			if(getStopwatch1() > 1000)
 133               		.loc 1 66 0
 134 0062 8091 0000 		lds r24,stopwatches+1
 135 0066 9091 0000 		lds r25,stopwatches+1+1
 136 006a 893E      		cpi r24,-23
 137 006c 9340      		sbci r25,3
 138 006e 00F0      		brlo .L3
  67:main.c        **** 			{
  68:main.c        **** 				saveSpeedData(mleft_speed, mright_speed);
 139               		.loc 1 68 0
 140 0070 6091 0000 		lds r22,mright_speed
 141 0074 7091 0000 		lds r23,mright_speed+1
 142 0078 8091 0000 		lds r24,mleft_speed
 143 007c 9091 0000 		lds r25,mleft_speed+1
 144 0080 0E94 0000 		call saveSpeedData
 145               	.LVL18:
  69:main.c        **** 				saveGyroData(gData);
 146               		.loc 1 69 0
 147 0084 4981      		ldd r20,Y+1
 148 0086 5A81      		ldd r21,Y+2
 149 0088 6B81      		ldd r22,Y+3
 150 008a 7C81      		ldd r23,Y+4
 151 008c 8D81      		ldd r24,Y+5
 152 008e 9E81      		ldd r25,Y+6
 153 0090 0E94 0000 		call saveGyroData
 154               	.LVL19:
  70:main.c        **** 				setStopwatch1(0);
 155               		.loc 1 70 0
 156 0094 1092 0000 		sts stopwatches+1+1,__zero_reg__
 157 0098 1092 0000 		sts stopwatches+1,__zero_reg__
 158 009c 00C0      		rjmp .L3
 159               	.L4:
  71:main.c        **** 			}
  72:main.c        **** 		}
  73:main.c        **** 		else if(!crashInfoWasSend && pressed)
 160               		.loc 1 73 0
 161 009e 8091 0000 		lds r24,crashInfoWasSend
 162 00a2 8111      		cpse r24,__zero_reg__
 163 00a4 00C0      		rjmp .L3
  74:main.c        **** 		{
  75:main.c        **** 			crashInfoWasSend = assignCrashInfo(gData);
 164               		.loc 1 75 0
 165 00a6 4981      		ldd r20,Y+1
 166 00a8 5A81      		ldd r21,Y+2
 167 00aa 6B81      		ldd r22,Y+3
 168 00ac 7C81      		ldd r23,Y+4
 169 00ae 8D81      		ldd r24,Y+5
 170 00b0 9E81      		ldd r25,Y+6
 171 00b2 0E94 0000 		call assignCrashInfo
 172               	.LVL20:
 173 00b6 8093 0000 		sts crashInfoWasSend,r24
  76:main.c        **** 			sendCrashInfo();
 174               		.loc 1 76 0
 175 00ba 0E94 0000 		call sendCrashInfo
 176               	.LVL21:
 177 00be 00C0      		rjmp .L3
 178               		.cfi_endproc
 179               	.LFE2:
 181               		.section	.progmem.data,"a",@progbits
 184               	__c.2161:
 185 0000 0A49 3243 		.string	"\nI2C ERROR - TWI STATE: 0x"
 185      2045 5252 
 185      4F52 202D 
 185      2054 5749 
 185      2053 5441 
 186               		.comm	sDataArray,30,1
 187               		.comm	timer,2,1
 188               		.comm	statusLEDs,1,1
 189               		.comm	motion_status,1,1
 190               		.text
 191               	.Letext0:
 192               		.file 2 "/usr/lib/avr/include/stdint.h"
 193               		.file 3 "../../../RP6Lib/RP6base/internal/Motors_internal.h"
 194               		.file 4 "../../../RP6Lib/RP6base/internal/LED_internal.h"
 195               		.file 5 "../../../RP6Lib/RP6base/Stopwatch.h"
 196               		.file 6 "Drive.h"
 197               		.file 7 "MPU9250.h"
 198               		.file 8 "../../../RP6Lib/RP6base/internal/Timer_internal.h"
 199               		.file 9 "Crash.h"
 200               		.file 10 "../../../RP6Lib/RP6common/RP6uart.h"
 201               		.file 11 "../../../RP6Lib/RP6common/RP6I2CmasterTWI.h"
 202               		.file 12 "../../../RP6Lib/RP6base/Bumpers.h"
 203               		.file 13 "../../../RP6Lib/RP6base/RP6_base.h"
 204               		.file 14 "../../../RP6Lib/RP6base/Acs.h"
 205               		.file 15 "../../../RP6Lib/RP6base/Motors.h"
 206               		.file 16 "../../../RP6Lib/RP6base/Led.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccAqXGoJ.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccAqXGoJ.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccAqXGoJ.s:4      *ABS*:0000003f __SREG__
     /tmp/ccAqXGoJ.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccAqXGoJ.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccAqXGoJ.s:12     .text:00000000 I2C_transmissionError
     /tmp/ccAqXGoJ.s:184    .progmem.data:00000000 __c.2161
     /tmp/ccAqXGoJ.s:54     .text.startup:00000000 main
                            *COM*:0000001e sDataArray
                            *COM*:00000002 timer
                            *COM*:00000001 statusLEDs
                            *COM*:00000001 motion_status

UNDEFINED SYMBOLS
writeNStringP
writeInteger
writeChar
initRobotBase
__I2CTWI_initMaster
I2CTWI_setTransmissionErrorHandler
buttenChanged
BUMPERS_setStateChangedHandler
powerON
initMPU9250
stopwatches
task_motionControl
task_Bumpers
task_I2CTWI
pressed
setLEDs
setMotorDir
moveAtSpeed
mright_speed
mleft_speed
saveSpeedData
saveGyroData
crashInfoWasSend
assignCrashInfo
sendCrashInfo
__do_clear_bss
